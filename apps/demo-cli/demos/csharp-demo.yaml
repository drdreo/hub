name: "C# Deploy Demo"
description: "Step-by-step creation and deployment of a C# API"
steps:
    - name: "Create app folder"
      type: "execute"
      command: "cmd /c mkdir src\\app"

    - name: "Generate csproj file"
      type: "generate"
      target: "apps/csharp/csharp-api.csproj"
      template: |
          <Project Sdk="Microsoft.NET.Sdk.Web">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
              <Nullable>enable</Nullable>
              <ImplicitUsings>enable</ImplicitUsings>
            </PropertyGroup>
          </Project>

    - name: "Generate program.cs file"
      type: "generate"
      target: "apps/csharp/program.cs"
      template: |
          using Microsoft.AspNetCore.Builder;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.AspNetCore.Http;
          using Microsoft.Extensions.Hosting;

          var app = WebApplication.Create();
          app.MapGet("/", () => "Hello, Tech Demo!");
          app.Urls.Add("http://*:8080");
          app.Run();

    - name: "Generate package.json file"
      type: "generate"
      target: "apps/csharp/package.json"
      template: |
          {
            "name": "csharp-api",
          }

    - name: "Add nx targets"
      type: "modify"
      target: "apps/csharp/package.json"
      match: "\n}"
      replace: |-

          "nx": {
            "targets": {
              "build": {
                "executor": "nx:run-commands",
                "options": {
                  "command": "dotenet build ./{projectRoot}/csharp-api.csproj"
                }
              },
              "serve": {
                "executor": "nx:run-commands",
                "options": {
                  "command": "dotnet run --project ./{projectRoot}/csharp-api.csproj"
                }
              },
              "deploy": {
                "executor": "@hub/plugin:deploy-docker",
                "options": {
                  "projectId": "8d1b3304-498b-42d7-8884-d2700d9b5649",
                  "redeploy": true
                }
              }
            }
          }
          }

    - name: "Generate Dockerfile"
      type: "generate"
      target: "apps/csharp/Dockerfile"
      template: |
          FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
          WORKDIR /app

          COPY apps/csharp/ ./
          RUN dotnet restore
          RUN dotnet publish -o out

          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
          WORKDIR /app
          COPY --from=build /app/out .
          EXPOSE 8080
          ENTRYPOINT ["dotnet", "DotNet.Docker.dll"]

    - name: "Git commit and push changes"
      type: "execute"
      command: "git checkout -b nx-demo && git commit -m 'csharp-demo' && git push origin nx-demo"
